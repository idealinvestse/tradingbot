"""Simple metrics collector for AI strategies."""

from datetime import datetime
from typing import Any

from app.strategies.utils import get_json_logger

logger = get_json_logger("metrics_collector")


class MetricsCollector:
    """Collect and store metrics for strategy execution."""

    def __init__(self) -> None:
        """Initialize metrics collector."""
        self.signals: list[dict[str, Any]] = []
        self.trades: list[dict[str, Any]] = []
        self.errors: list[dict[str, Any]] = []

    def record_signal(
        self, strategy_name: str, signal: dict[str, Any], correlation_id: str
    ) -> None:
        """Record a signal generated by a strategy."""
        self.signals.append(
            {
                "timestamp": datetime.utcnow().isoformat(),
                "strategy_name": strategy_name,
                "signal": signal,
                "correlation_id": correlation_id,
            }
        )
        logger.info(
            f"Signal recorded for {strategy_name}", extra={"correlation_id": correlation_id}
        )

    def record_trade(self, strategy_name: str, trade: dict[str, Any], correlation_id: str) -> None:
        """Record a trade execution."""
        self.trades.append(
            {
                "timestamp": datetime.utcnow().isoformat(),
                "strategy_name": strategy_name,
                "trade": trade,
                "correlation_id": correlation_id,
            }
        )
        logger.info(f"Trade recorded for {strategy_name}", extra={"correlation_id": correlation_id})

    def record_error(self, strategy_name: str, error: str, correlation_id: str) -> None:
        """Record an error."""
        self.errors.append(
            {
                "timestamp": datetime.utcnow().isoformat(),
                "strategy_name": strategy_name,
                "error": error,
                "correlation_id": correlation_id,
            }
        )
        logger.error(f"Error in {strategy_name}: {error}", extra={"correlation_id": correlation_id})

    def get_summary(self) -> dict[str, Any]:
        """Get summary of collected metrics."""
        return {
            "total_signals": len(self.signals),
            "total_trades": len(self.trades),
            "total_errors": len(self.errors),
            "last_update": datetime.utcnow().isoformat(),
        }
